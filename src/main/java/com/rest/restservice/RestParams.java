package com.rest.restservice;

/*
 * Copyright 2022 stanislawbartkowski@gmail.com
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Optional;

/**
 * Class generated by custom getParams method with REST service specification.
 */

public class RestParams {

    private final Map<String, RestParam> params = new HashMap<String, RestParam>();
    private final String requestMethod;
    private final Optional<CONTENT> responseContent;
    private final Optional<String> headersAllowed;
    private final boolean requestDataExpected;
    private final boolean crossedAllowed;

    /**
     * List of allowed method included in the HTTP response. Used to create "Access-Control-Allow-Methods" header key. "OPTIONS" is added automatically.
     *
     * @return List of responses
     */
    public List<String> getMethodsAllowed() {
        return methodsAllowed;
    }

    private final List<String> methodsAllowed;

    /**
     * CORS calls allowed. If true, serveral HTTP header request setting are enabled to allow CORS calls.
     *
     * @return true, CORS is allowed
     */

    public boolean isCrossedAllowed() {
        return crossedAllowed;
    }

    public boolean isRequestDataExpected() {
        return requestDataExpected;
    }

    /**
     * General REST service specification
     *
     * @param requestMethod   Request method, PUT, GET, DELETE etc
     * @param responseContent Optional, type of response content, JSON or TEXT
     * @param crossedAllowed  CORS allowed
     * @param methodsAllowed  List of methods allowed, included in the response Header
     * @param headersAllowed  List of heeaders allowed separated by ,
     */
    public RestParams(String requestMethod, Optional<CONTENT> responseContent, boolean crossedAllowed, List<String> methodsAllowed, Optional<String> headersAllowed, boolean requestDataExpected) {
        this.requestMethod = requestMethod;
        this.responseContent = responseContent;
        this.crossedAllowed = crossedAllowed;
        this.methodsAllowed = methodsAllowed;
        this.headersAllowed = headersAllowed;
        this.requestDataExpected = requestDataExpected;
    }


    public RestParams(String requestMethod, Optional<CONTENT> responseContent, boolean crossedAllowed, List<String> methodsAllowed) {
        this(requestMethod, responseContent, crossedAllowed, methodsAllowed, Optional.empty(), false);
    }

    /**
     * Get map of expected query URL parameters
     *
     * @return Map of expected parameters
     */
    public Map<String, RestParam> getParams() {
        return params;
    }

    /**
     * CORT policy, list of header keys allowed
     *
     * @return List of headers allowed separated by ,
     */
    public Optional<String> getHeadersAllowed() {
        return headersAllowed;
    }

    /**
     * HTTP method for this REST service
     *
     * @return HTTP method
     */
    public String getRequestMethod() {
        return requestMethod;
    }


    /**
     * Get type of respond content TEXT or JSON. if empty Content-Type is not set
     *
     * @return type of content
     */
    public Optional<CONTENT> getResponseContent() {
        return responseContent;
    }


    /**
     * Type of response content.
     * JSON : Content-Type  application/json
     * TEXT: Content-Type text/plain
     * ZIP : Content-Type application/zip
     * JS: Content-Type text/javascript
     * XML: Content-Type application/xml
     */
    public enum CONTENT {
        TEXT, JSON, ZIP, JS, XML
    }

    /**
     * Query parameter specification<br>
     * PARAMTYPE : INT, BOOLEAN or STRING
     * obligatory: query parameter is mandatory
     * defa : if not mandatory and does not exist use this defa value
     */
    public static class RestParam {
        final PARAMTYPE ptype;
        final boolean obligatory;
        final ParamValue defa;

        /**
         * Obligatory paraneter
         * Paramter type: INT, BOOLEAN or STRING
         *
         * @param ptype
         */
        RestParam(PARAMTYPE ptype) {
            this.ptype = ptype;
            this.obligatory = true;
            defa = new ParamValue();
        }

        /**
         * Optional parameter
         *
         * @param ptype type
         * @param defa  Default value if not specified
         */
        RestParam(PARAMTYPE ptype, ParamValue defa) {
            this.ptype = ptype;
            this.obligatory = false;
            this.defa = defa;
        }
    }

    /**
     * Add parameter obligatory specification
     *
     * @param paramName Query parameter name
     * @param ptype     Query parameter type
     */
    public void addParam(String paramName, PARAMTYPE ptype) {
        params.put(paramName, new RestParam(ptype));
    }

    /**
     * Add specification of optional parameter
     *
     * @param paramName Query parameter name
     * @param ptype     Parameter type
     * @param defa      Default value if parameter not found in the URL
     */
    public void addParam(String paramName, PARAMTYPE ptype, ParamValue defa) {
        params.put(paramName, new RestParam(ptype, defa));
    }

}
